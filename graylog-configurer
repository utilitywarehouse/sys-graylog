#!/bin/sh

errors=""
graylog_api="http://admin:${ADMIN_PASSWORD}@127.0.0.1:9000/api"

wait_graylog_alive() {
  until curl -s "${graylog_api}/system/lbstatus"; do
    printf "graylog not ready, sleeping for 3 seconds\n"
    sleep 3
  done
  sleep 10
  printf "\n"
}

set_graylog_index() {
  shards="$1"
  replicas="$2"
  max_size="$3"
  max_indices="$4"
  rotation_strategy='{"type":"org.graylog2.indexer.rotation.strategies.SizeBasedRotationStrategyConfig","max_size":'${max_size}'}'
  retention_strategy='{"type":"org.graylog2.indexer.retention.strategies.DeletionRetentionStrategyConfig","max_number_of_indices":'${max_indices}'}'

  printf "\nSetup graylog default index\n---\n"

  stored_config=$(curl -s -XGET "${graylog_api}/system/indices/index_sets" | jq -rc '.index_sets[] | select(.index_prefix == "graylog")')

  index_id=$(echo $stored_config | jq -rc '.id')
  updated_config=$(echo $stored_config | jq -rc '.
    | .shards = '${shards}'
    | .replicas = '${replicas}'
    | .rotation_strategy_class = "org.graylog2.indexer.rotation.strategies.SizeBasedRotationStrategy"
    | .rotation_strategy = '${rotation_strategy}'
    | .retention_strategy_class = "org.graylog2.indexer.retention.strategies.DeletionRetentionStrategy"
    | .retention_strategy = '${retention_strategy}'
  ')

  if [ ! "${stored_config}" = "${updated_config}" ]; then
    printf "graylog index updated\n"
    curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${updated_config}" "${graylog_api}/system/indices/index_sets/${index_id}" || errors="${errors}failed to graylog default index, "
  else
    printf "no changes in index configuration\n"
  fi
}

set_input() {
  input_name="$1"
  input_data="$2"
  origin="$3"

  printf "\nSetup ${input_name}\n---\n"

  input_id=$(curl -s -XGET "${graylog_api}/system/inputs" | jq -r '.inputs[] | select(.title == "'"${input_name}"'") | .id')
  if [ ! "${input_id}" ]; then
    curl -sf -X POST -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${input_data}" "${graylog_api}/system/inputs" || errors="${errors}failed to create ${input_name} input, "
    sleep 5
    printf "\n${input_name} created\n"
  else
    curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${input_data}" "${graylog_api}/system/inputs/${input_id}" || errors="${errors}failed to update ${input_name} input, "
    sleep 5
    printf "\n${input_name} updated\n"
  fi

  if [ "${origin}" ]; then
    input_id=$(curl -s -XGET "${graylog_api}/system/inputs" | jq -r '.inputs[] | select(.title == "'"${input_name}"'") | .id')
    curl -sf -X POST -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d '{"key":"origin","value":"'"${origin}"'"}' "${graylog_api}/system/inputs/${input_id}/staticfields" || errors="${errors}failed to update ${origin} origin, "
    sleep 5
    printf "${origin} origin added to ${input_name}\n"
  fi
}

set_extractor() {
  extractor="$1"
  input_id="$2"

  printf "\nSetup ${extractor} extractor\n---\n"

  extractor_id=$(curl -s -XGET "${graylog_api}/system/inputs/${input_id}/extractors" | jq -r '.extractors[] | select(.title == "'"${extractor}"'") | .id')
  extractor_data='{"title":"'"${extractor}"'","cut_or_copy":"copy","source_field":"'"${extractor}"'","extractor_type":"json","target_field":"","extractor_config":{"key_prefix":"'"${extractor}"'."},"converters":{},"condition_type":"none","condition_value":""}'
  
  if [ ! "${extractor_id}" ]; then
    curl -sf -X POST -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${extractor_data}" "${graylog_api}/system/inputs/${input_id}/extractors" || errors="${errors}failed to create ${extractor} extractor, "
    sleep 5
    printf "\n${extractor} extractor created\n"
  else
    curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${extractor_data}" "${graylog_api}/system/inputs/${input_id}/extractors/${extractor_id}" || errors="${errors}failed to update ${extractor} extractor, "
    sleep 5
    printf "\n${extractor} extractor updated\n"
  fi
}

set_admin() {
  username="$1"
  # Password cannot be used to login, but is needed for user creation
  password=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)

  user_id=$(curl -s -H "Accept: application/json" -XGET "${graylog_api}/users/${username}" | jq -r '. | select(.username == "'"${username}"'") | .id')
  user_data='{"username":"'"${username}"'","email":"'"${username}"'@utilitywarehouse.co.uk","roles":["Admin"],"password":"'"${password}"'","full_name":"'"${username}"'", "permissions":[]}'
  if [ "${user_id}" ]; then
    curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${user_data}" "${graylog_api}/users/${username}" || errors="${errors}failed to update ${username} admin, "
    sleep 5
    printf "${username} admin updated\n"
  else
    curl -sf -X POST -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${user_data}" "${graylog_api}/users" || errors="${errors}failed to create ${username} admin, "
    sleep 5
    printf "${username} admin created\n"
  fi
}

set_cloudtrail() {
  account="$1"
  eval aws_id=\$$2
  if [ -z "$aws_id" ]; then errors="${errors}${2} is not set, ";fi
  eval aws_secret=\$$3
  if [ -z "$aws_secret" ]; then errors="${errors}${3} is not set, ";fi

  printf "\nSetup cloudtrail for uw-${account}\n---\n"
  input_name="aws_cloudtrail_input_${account}"
  input_data='{"title":"'"${input_name}"'","type":"org.graylog.aws.inputs.cloudtrail.CloudTrailInput","configuration":{"aws_sqs_region":"eu-west-1","aws_s3_region":"eu-west-1","aws_sqs_queue_name":"local-account-cloudtrail","aws_access_key":"'"${aws_id}"'","aws_secret_key":"'"${aws_secret}"'"},"global":true}'

  set_input "${input_name}" "${input_data}" "cloudtrail-${account}"
}

check_template_sync() {
  printf "checking if elasticsearch template is synced\n"
  stored_template=$(curl -sf "http://${ELASTICSEARCH_AUTHORITY}/_template/graylog-custom-template" | jq -rcS '."graylog-custom-template" // empty')
  new_template=$(echo "${ELASTICSEARCH_CUSTOM_TEMPLATE}" | jq -rcS)
  changes=""

  stored_mappings=$(echo "${stored_template}" | jq '."mappings"')
  new_mappings=$(echo "${new_template}" | jq '."mappings"')
  stored_interval=$(echo "${stored_template}" | jq '."settings"."index"."refresh_interval"')
  new_interval=$(echo "${new_template}" | jq '."settings"."refresh_interval"')
  stored_pattern=$(echo "${stored_template}" | jq '."index_patterns"[0]')
  new_pattern=$(echo "${new_template}" | jq '."template"')

  if [ ! "${new_mappings}" = "${stored_mappings}" ]; then
    printf "changes in mappings detected\n"
    changes="true"
  fi
  if [ ! "${new_interval}" = "${stored_interval}" ]; then
    printf "changes in interval detected\n"
    changes="true"
  fi
  if [ ! "${new_pattern}" = "${stored_pattern}" ]; then
    printf "changes in pattern detected\n"
    changes="true"
  fi

  if [ ! "${changes}" ]; then
    printf "elasticsearch template is synced\n"
    template_synced="true"
  fi
}

### START ###

wait_graylog_alive

## graylog index
if [ ! "${GRAYLOG_INDEX_SHARDS}" ]; then
  errors="${errors}missing config: graylog index shards, "
  missing="true"
fi
if [ ! "${GRAYLOG_INDEX_REPLICAS}" ]; then
  errors="${errors}missing config: graylog index replicas, "
  missing="true"
fi
if [ ! "${GRAYLOG_INDEX_MAX_SIZE}" ]; then
  errors="${errors}missing config: graylog index max size, "
  missing="true"
fi
if [ ! "${GRAYLOG_MAX_INDICES}" ]; then
  errors="${errors}missing config: graylog max indices, "
  missing="true"
fi

if [ ! "${missing}" ]; then
  set_graylog_index "${GRAYLOG_INDEX_SHARDS}" "${GRAYLOG_INDEX_REPLICAS}" "${GRAYLOG_INDEX_MAX_SIZE}" "${GRAYLOG_MAX_INDICES}"
fi

## input
input_data='{"title":"gelf_tcp_input","type":"org.graylog2.inputs.gelf.tcp.GELFTCPInput","configuration":{"port":12202,"bind_address":"0.0.0.0"},"global":true}'
set_input gelf_tcp_input ${input_data}

## cloudtrail
if [ "${AWS_CLOUDTRAIL_ACCOUNTS}" ]; then
  for c in ${AWS_CLOUDTRAIL_ACCOUNTS}; do
    uppercase_account=$(echo "${c}" | tr a-z A-Z)
    set_cloudtrail "${c}" "AWS_ID_${uppercase_account}" "AWS_SECRET_${uppercase_account}"
  done
fi

## extractors
if [ "${EXTRACTORS}" ]; then
  tcp_input_id=$(curl -s -XGET "${graylog_api}/system/inputs" | jq -r '.inputs[] | select(.title == "gelf_tcp_input") | .id')
  for e in ${EXTRACTORS}; do
    set_extractor ${e} ${tcp_input_id}
  done
fi

## sso plugin
printf "\nSetup SSO plugin\n---\n"
sso_role_name="sso_uw"
sso_plugin_config='{"username_header":"X-Forwarded-User","email_header":"X-Forwarded-Email","default_group":"'"${sso_role_name}"'","auto_create_user":true,"require_trusted_proxies":true}'
curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${sso_plugin_config}" "${graylog_api}/plugins/org.graylog.plugins.auth.sso/config" || errors="${errors}failed to setup SSO plugin, "

printf "\nSetup sso permissions\n---\n"
sso_permissions=$(echo "${SSO_PERMISSIONS}" | jq -c '.')
if [ ! "${sso_permissions}" ]; then
  sso_permissions='["*"]'
fi
sso_role='{"name":"'"${sso_role_name}"'","permissions":'"${sso_permissions}"'}'
existing_role=$(curl -s -H "Accept: application/json" -XGET "${graylog_api}/roles/${sso_role_name}" | jq -r '.name')
if [ "${sso_role_name}" = "${existing_role}" ];then
  curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${sso_role}" "${graylog_api}/roles/${sso_role_name}" || errors="${errors}failed to update ${sso_role_name} role, "
  printf "${sso_role_name} role updated\n"
else
  curl -sf -X POST -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${sso_role}" "${graylog_api}/roles" || errors="${errors}failed to create ${sso_role_name} role, "
  printf "${sso_role_name} role created\n"
fi

## authentication
printf "\nConfigure authentication methods\n---\n"
auth_config='{"realm_order":["mongodb-session","sso","root-user","legacy-ldap","access-token","mongodb-password"],"disabled_realms":["legacy-ldap","access-token","mongodb-password"]}'
curl -sf -X PUT -H "Content-Type: application/json" -H "X-Requested-By: graylog-configurer" -d "${auth_config}" "${graylog_api}/system/authentication/config" || errors="${errors}failed to update authentication methods, "

if [ "${ADMINS}" ]; then
  printf "\nSetup admins\n---\n"
  for a in ${ADMINS}; do
    set_admin "${a}"
  done
fi

## elasticsearch template
if [ "${ELASTICSEARCH_CUSTOM_TEMPLATE}" ]; then
  printf "\n\nSetup custom elastic search template\n"
  until curl -s "http://${ELASTICSEARCH_AUTHORITY}/_cluster/health"; do
    printf "elasticsearch not ready, sleeping for 3 seconds\n"
    sleep 3
  done
  printf "\n"

  check_template_sync

  if [ ! "${template_synced}" ]; then
    printf "setting new template\n"
    curl -sf -X PUT -H "Content-Type: application/json" -d "${new_template}" "http://${ELASTICSEARCH_AUTHORITY}/_template/graylog-custom-template" || errors="${errors}failed to update elasticsearch custom template, "
    until [ "${template_synced}" ]; do
      check_template_sync
      sleep 3
    done
    printf "cycling active index to active new template\n"
    curl -sf -X POST -H "X-Requested-By: graylog-configurer" "${graylog_api}/system/deflector/cycle" || errors="${errors}failed to cycle active index, "
  fi
fi

if [ "${errors}" ]; then
  printf "\n\e[1;31mConfigurer found the following errors: \e[0m${errors}"
  printf "\n\e[1;31mConfiguration might be out of sync. Please run the configurer again.\e[0m"
fi

printf "\n\nGoing to sleep...\n"
sleep infinity
