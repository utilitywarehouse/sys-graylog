#!/bin/sh
errors=""

until curl -s "http://127.0.0.1:9000/api/system/lbstatus"; do
  echo 'graylog not ready, sleeping for 3 seconds'
  sleep 3
done
sleep 10
printf "\n"

graylog_api="http://admin:${ADMIN_PASSWORD}@127.0.0.1:9000/api"

set_input()
{
  input_name="$1"
  input_data="$2"
  origin="$3"

  printf "\nSetup ${input_name}\n"

  input_id=$(curl -s -XGET "${graylog_api}/system/inputs" | jq -r '.inputs[] | select(.title == "'"${input_name}"'") | .id')
  if [ ! "${input_id}" ]; then
    curl -sf -X POST -H "Content-Type: application/json" -d "${input_data}" "${graylog_api}/system/inputs" || errors="${errors}failed to create ${input_name} input, "
    sleep 5
    printf "\n${input_name} created\n"
  else
    curl -sf -X PUT -H "Content-Type: application/json" -d "${input_data}" "${graylog_api}/system/inputs/${input_id}" || errors="${errors}failed to update ${input_name} input, "
    sleep 5
    printf "\n${input_name} updated\n"
  fi

  if [ "${origin}" ]; then
    input_id=$(curl -s -XGET "${graylog_api}/system/inputs" | jq -r '.inputs[] | select(.title == "'"${input_name}"'") | .id')
    curl -sf -X POST -H "Content-Type: application/json" -d '{"key":"origin","value":"'"${origin}"'"}' "${graylog_api}/system/inputs/${input_id}/staticfields" || errors="${errors}failed to update ${origin} origin, "
    sleep 5
    printf "${origin} origin added to ${input_name}\n"
  fi
}

set_extractor()
{
  extractor="$1"
  input_id="$2"

  printf "\nSetup ${extractor} extractor\n"

  extractor_id=$(curl -s -XGET "${graylog_api}/system/inputs/${input_id}/extractors" | jq -r '.extractors[] | select(.title == "'"${extractor}"'") | .id')
  extractor_data='{"title":"'"${extractor}"'","cut_or_copy":"copy","source_field":"'"${extractor}"'","extractor_type":"json","target_field":"","extractor_config":{"key_prefix":"'"${extractor}"'."},"converters":{},"condition_type":"none","condition_value":""}'
  
  if [ ! "${extractor_id}" ]; then
    curl -sf -X POST -H "Content-Type: application/json" -d "${extractor_data}" "${graylog_api}/system/inputs/${input_id}/extractors" || errors="${errors}failed to update ${extractor} extractor, "
    sleep 5
    printf "\n${extractor} extractor created\n"
  else
    echo "curling ${graylog_api}/system/inputs/${input_id}/extractors/${extractor_id}"
    curl -sf -X PUT -H "Content-Type: application/json" -d "${extractor_data}" "${graylog_api}/system/inputs/${input_id}/extractors/${extractor_id}" || errors="${errors}failed to update ${extractor} extractor, "
    sleep 5
    printf "\n${extractor} extractor updated\n"
  fi
}

set_admin()
{
  username="$1"
  # Password cannot be used to login, but is needed for user creation
  password=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)

  printf "\nSetup ${username} as admin\n"
  user_id=$(curl -s -H "Accept: application/json" -XGET "${graylog_api}/users/${username}" | jq -r '. | select(.username == "'"${username}"'") | .id')
  user_data='{"username":"'"${username}"'","email":"'"${username}"'@utilitywarehouse.co.uk","roles":["Admin"],"password":"'"${password}"'","full_name":"'"${username}"'", "permissions":[]}'
  if [ "${user_id}" ]; then
    curl -sf -X PUT -H "Content-Type: application/json" -d "${user_data}" "${graylog_api}/users/${username}" || errors="${errors}failed to update ${username} admin, "
    sleep 5
    printf "\n${username} admin updated\n"
  else
    curl -sf -X POST -H "Content-Type: application/json" -d "${user_data}" "${graylog_api}/users" || errors="${errors}failed to create ${username} admin, "
    sleep 5
    printf "\n${username} admin created\n"
  fi
}

if [ "${AWS_CLOUDTRAIL_PROD_ENABLED}" = "true" ]; then
  input_name=aws_cloudtrail_input_prod
  input_data='{"title":"'"${input_name}"'","type":"org.graylog.aws.inputs.cloudtrail.CloudTrailInput","configuration":{"aws_sqs_region":"eu-west-1","aws_s3_region":"eu-west-1","aws_sqs_queue_name":"'"${AWS_SQS_QUEUE_PROD}"'","aws_access_key":"'"${AWS_ID_PROD}"'","aws_secret_key":"'"${AWS_SECRET_PROD}"'"},"global":true}'
  set_input ${input_name} ${input_data} cloudtrail-prod
fi

if [ "${AWS_CLOUDTRAIL_DEV_ENABLED}" = "true" ]; then
  input_name=aws_cloudtrail_input_dev
  input_data='{"title":"'"${input_name}"'","type":"org.graylog.aws.inputs.cloudtrail.CloudTrailInput","configuration":{"aws_sqs_region":"eu-west-1","aws_s3_region":"eu-west-1","aws_sqs_queue_name":"'"${AWS_SQS_QUEUE_DEV}"'","aws_access_key":"'"${AWS_ID_DEV}"'","aws_secret_key":"'"${AWS_SECRET_DEV}"'"},"global":true}'
  set_input ${input_name} ${input_data} cloudtrail-dev
fi

input_data='{"title":"gelf_tcp_input","type":"org.graylog2.inputs.gelf.tcp.GELFTCPInput","configuration":{"port":12202,"bind_address":"0.0.0.0"},"global":true}'
set_input gelf_tcp_input ${input_data}

printf "\nSetup extractors\n"
tcp_input_id=$(curl -s -XGET "${graylog_api}/system/inputs" | jq -r '.inputs[] | select(.title == "gelf_tcp_input") | .id')
for e in ${EXTRACTORS}; do
  set_extractor ${e} ${tcp_input_id}
done

printf "\nSetup SSO plugin\n"
sso_role_name="sso_uw"
sso_plugin_config='{"username_header":"X-Forwarded-User","email_header":"X-Forwarded-Email","default_group":"'"${sso_role_name}"'","auto_create_user":true,"require_trusted_proxies":true}'
curl -sf -X PUT -H "Content-Type: application/json" -d "${sso_plugin_config}" "${graylog_api}/plugins/org.graylog.plugins.auth.sso/config" || errors="${errors}failed to setup SSO plugin, "

printf "\nSetup sso permissions\n"
sso_permissions=$(echo "${SSO_PERMISSIONS}" | jq -c '.')
if [ ! "${sso_permissions}" ]; then
  sso_permissions='["*"]'
fi
sso_role='{"name":"'"${sso_role_name}"'","permissions":'"${sso_permissions}"'}'
existing_role=$(curl -s -H "Accept: application/json" -XGET "${graylog_api}/roles/${sso_role_name}" | jq -r '.name')
if [ "${sso_role_name}" = "${existing_role}" ];then
  curl -sf -X PUT -H "Content-Type: application/json" -d "${sso_role}" "${graylog_api}/roles/${sso_role_name}" || errors="${errors}failed to update ${sso_role_name} role, "
  printf "\n${sso_role_name} role updated\n"
else
  curl -sf -X POST -H "Content-Type: application/json" -d "${sso_role}" "${graylog_api}/roles" || errors="${errors}failed to create ${sso_role_name} role, "
  printf "\n${sso_role_name} role created\n"
fi

printf "\nConfigure authentication methods\n"
auth_config='{"realm_order":["mongodb-session","sso","root-user","legacy-ldap","access-token","mongodb-password"],"disabled_realms":["legacy-ldap","access-token","mongodb-password"]}'
curl -sf -X PUT -H "Content-Type: application/json" -d "${auth_config}" "${graylog_api}/system/authentication/config" || errors="${errors}failed to update authentication methods, "

if [ "${ADMINS}" ]; then
  printf "\nSetup admins\n"
  for a in ${ADMINS}; do
    set_admin "${a}"
  done
fi

if [ "${ELASTICSEARCH_CUSTOM_TEMPLATE}" ]; then
  printf "\n\nSetup custom elastic search template\n"
  until curl -s "http://${ELASTICSEARCH_AUTHORITY}/_cluster/health"; do
    echo 'elasticsearch not ready, sleeping for 3 seconds'
    sleep 3
  done

  custom_template=$(echo "${ELASTICSEARCH_CUSTOM_TEMPLATE}" | jq -c)
  curl -sf -X PUT -H "Content-Type: application/json" -d "${custom_template}" "http://${ELASTICSEARCH_AUTHORITY}/_template/graylog-custom-template" || errors="${errors}failed to update elasticsearch custom template, "
  sleep 5
  # Rotate the active index to activate the new template
  curl -sf -X POST "${graylog_api}/system/deflector/cycle" || errors="${errors}failed to cycle active index, "
fi

if [ "${errors}" ]; then
  printf "\n\e[1;31mConfigurer found the following errors: \e[0m${errors}"
  printf "\n\e[1;31mConfiguration might be out of sync. Please run the configurer again.\e[0m"
fi

printf "\n\nGoing to sleep...\n"
sleep infinity
